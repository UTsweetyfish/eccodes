Index: eccodes-2.18.0/fortran/CMakeLists.txt
===================================================================
--- eccodes-2.18.0.orig/fortran/CMakeLists.txt
+++ eccodes-2.18.0/fortran/CMakeLists.txt
@@ -9,7 +9,7 @@ if( HAVE_FORTRAN )
 
     ecbuild_add_executable( TARGET  grib_types
                             NOINSTALL
-                            SOURCES grib_types.f90 grib_fortran_kinds.c )
+                            SOURCES grib_type_interfaces.f90 grib_types.f90 grib_fortran_kinds.c )
 
     add_custom_command( OUTPUT  grib_kinds.h
                         COMMAND grib_types > grib_kinds.h
@@ -87,7 +87,7 @@ if( HAVE_FORTRAN )
     ecbuild_add_resources( TARGET fortran_resources
                            PACK
                             grib_fortran_prototypes.h grib_api_constants.h grib_api_externals.h
-                            grib_api_visibility.h grib_types.f90 create_grib_f90.sh
+                            grib_api_visibility.h grib_type_interfaces.f90 grib_types.f90 create_grib_f90.sh
                             grib_f90.f90.head grib_f90.f90.tail grib_f90_int.f90 grib_f90_long_int.f90
                             grib_f90_int_size_t.f90 grib_f90_long_size_t.f90
 
Index: eccodes-2.18.0/fortran/grib_type_interfaces.f90
===================================================================
--- /dev/null
+++ eccodes-2.18.0/fortran/grib_type_interfaces.f90
@@ -0,0 +1,141 @@
+! (C) Copyright 2020- ECMWF.
+!
+! This software is licensed under the terms of the Apache Licence Version 2.0
+! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
+!
+! In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
+! virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
+
+
+! Define interfaces in a type-safe way, needed for gfortran-10
+
+module grib_type_interfaces
+
+  
+interface f_sizeof
+   subroutine f_sizeof_i2(a,b,n) bind(C, name='f_sizeof_')
+     use iso_c_binding
+     implicit none
+     integer(2), intent(in) :: a, b
+     integer(C_INT), intent(out) :: n
+   end subroutine f_sizeof_i2
+   subroutine f_sizeof_i4(a,b,n) bind(C, name='f_sizeof_')
+     use iso_c_binding
+     implicit none
+     integer(C_INT), intent(in) :: a, b
+     integer(C_INT), intent(out) :: n
+   end subroutine f_sizeof_i4
+   subroutine f_sizeof_i8(a,b,n) bind(C, name='f_sizeof_')
+     use iso_c_binding
+     implicit none
+     integer(C_LONG), intent(in) :: a, b
+     integer(C_INT), intent(out) :: n
+   end subroutine f_sizeof_i8
+   subroutine f_sizeof_r4(a,b,n) bind(C, name='f_sizeof_')
+     use iso_c_binding
+     implicit none
+     REAL(C_FLOAT), intent(in) :: a, b
+     integer(C_INT), intent(out) :: n
+   end subroutine f_sizeof_r4
+   subroutine f_sizeof_r8(a,b,n) bind(C, name='f_sizeof_')
+     use iso_c_binding
+     implicit none
+     REAL(C_DOUBLE), intent(in) :: a, b
+     integer(C_INT), intent(out) :: n
+   end subroutine f_sizeof_r8
+end interface f_sizeof
+
+interface check_int
+   subroutine check_int_i2(a,b,n) bind(C, name='check_int_')
+     use iso_c_binding
+     implicit none
+     integer(2), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_int_i2
+   subroutine check_int_i4(a,b,n) bind(C, name='check_int_')
+     use iso_c_binding
+     implicit none
+     integer(C_INT), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_int_i4
+   subroutine check_int_i8(a,b,n) bind(C, name='check_int_')
+     use iso_c_binding
+     implicit none
+     integer(C_LONG), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_int_i8
+end interface check_int
+
+interface check_size_t
+   subroutine check_size_t_i2(a,b,n) bind(C, name='check_size_t_')
+     use iso_c_binding
+     implicit none
+     integer(kind=2), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_size_t_i2
+   subroutine check_size_t_i4(a,b,n) bind(C, name='check_size_t_')
+     use iso_c_binding
+     implicit none
+     integer(C_INT), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_size_t_i4
+   subroutine check_size_t_i8(a,b,n) bind(C, name='check_size_t_')
+     use iso_c_binding
+     implicit none
+     integer(C_LONG), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_size_t_i8
+end interface check_size_t
+
+interface check_long
+   subroutine check_long_i2(a,b,n) bind(C, name='check_long_')
+     use iso_c_binding
+     implicit none
+     integer(2), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_long_i2
+   subroutine check_long_i4(a,b,n) bind(C, name='check_long_')
+     use iso_c_binding
+     implicit none
+     integer(C_INT), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_long_i4
+   subroutine check_long_i8(a,b,n) bind(C, name='check_long_')
+     use iso_c_binding
+     implicit none
+     integer(kind=8), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_long_i8
+end interface check_long
+
+interface check_float
+   subroutine check_float_r4(a,b,n) bind(C, name='check_float_')
+     use iso_c_binding
+     implicit none
+     REAL(C_FLOAT), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_float_r4
+   subroutine check_float_r8(a,b,n) bind(C, name='check_float_')
+     use iso_c_binding
+     implicit none
+     REAL(C_DOUBLE), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_float_r8
+end interface check_float
+
+interface check_double
+   subroutine check_double_r4(a,b,n) bind(C, name='check_double_')
+     use iso_c_binding
+     implicit none
+     REAL(KIND=4), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_double_r4
+   subroutine check_double_r8(a,b,n) bind(C, name='check_double_')
+     use iso_c_binding
+     implicit none
+     REAL(KIND=8), intent(in) :: a, b
+     character(len=1), intent(out) :: n
+   end subroutine check_double_r8
+end interface check_double
+
+end module grib_type_interfaces
Index: eccodes-2.18.0/fortran/grib_types.f90
===================================================================
--- eccodes-2.18.0.orig/fortran/grib_types.f90
+++ eccodes-2.18.0/fortran/grib_types.f90
@@ -7,6 +7,7 @@
 ! virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 
 integer function kind_of_size_t()
+  use grib_type_interfaces, only : check_size_t
   integer(2), dimension(2) :: x2 = (/1, 2/)
   integer(4), dimension(2) :: x4 = (/1, 2/)
   integer(8), dimension(2) :: x8 = (/1, 2/)
@@ -35,6 +36,7 @@ integer function kind_of_size_t()
 end function kind_of_size_t
 
 integer function kind_of_long()
+  use grib_type_interfaces, only : check_long
   integer(2), dimension(2) :: x2 = (/1, 2/)
   integer(4), dimension(2) :: x4 = (/1, 2/)
   integer(8), dimension(2) :: x8 = (/1, 2/)
@@ -63,6 +65,7 @@ integer function kind_of_long()
 end function kind_of_long
 
 integer function kind_of_int()
+  use grib_type_interfaces, only : check_int
   integer(2), dimension(2) :: x2 = (/1, 2/)
   integer(4), dimension(2) :: x4 = (/1, 2/)
   integer(8), dimension(2) :: x8 = (/1, 2/)
@@ -91,6 +94,7 @@ integer function kind_of_int()
 end function kind_of_int
 
 integer function kind_of_float()
+  use grib_type_interfaces, only : check_float
   real(4), dimension(2) :: x4 = (/1., 2./)
   real(8), dimension(2) :: x8 = (/1., 2./)
   character(len=1) :: ret
@@ -112,6 +116,7 @@ integer function kind_of_float()
 end function kind_of_float
 
 integer function kind_of_double()
+  use grib_type_interfaces, only : check_double
   real(4), dimension(2) :: real4 = (/1., 2./)
   real(8), dimension(2) :: real8 = (/1., 2./)
   character(len=1) :: ret
@@ -133,6 +138,7 @@ integer function kind_of_double()
 end function kind_of_double
 
 program kind_h
+  use grib_type_interfaces, only : f_sizeof
   integer :: size
   integer, dimension(2) :: i
   integer(kind=2), dimension(2) :: i2
